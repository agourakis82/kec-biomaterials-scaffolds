# üöÄ DARWIN Meta-Research Brain - Cloud Build CI/CD Pipeline
# Automated deployment para GCP Cloud Run (projeto pcs-helio)

# ============================================================================
# Build Configuration
# ============================================================================
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  dynamicSubstitutions: true

# Timeout for entire build (20 minutes)
timeout: 1200s

# Substitutions for dynamic configuration
substitutions:
  _PROJECT_ID: 'pcs-helio'
  _REGION: 'us-central1'
  _BACKEND_SERVICE: 'darwin-unified-brain'
  _FRONTEND_SERVICE: 'darwin-frontend'
  _BACKEND_DOMAIN: 'api.agourakis.med.br'
  _FRONTEND_DOMAIN: 'darwin.agourakis.med.br'

# ============================================================================
# Build Steps
# ============================================================================
steps:

# Step 1: Build Backend Docker Image
- name: 'gcr.io/cloud-builders/docker'
  id: 'build-backend'
  args: [ 'build', '-t', 'gcr.io/${_PROJECT_ID}/${_BACKEND_SERVICE}:${COMMIT_SHA}', '-t', 'gcr.io/${_PROJECT_ID}/${_BACKEND_SERVICE}:latest', '-f', 'darwin/backend/kec_unified_api/Dockerfile.production', './darwin/backend/kec_unified_api' ]
  timeout: 600s

# Step 2: Push Backend Image to GCR
- name: 'gcr.io/cloud-builders/docker'
  id: 'push-backend'
  args: [ 'push', 'gcr.io/${_PROJECT_ID}/${_BACKEND_SERVICE}:${COMMIT_SHA}' ]
  waitFor: [ 'build-backend' ]

- name: 'gcr.io/cloud-builders/docker'
  id: 'push-backend-latest'
  args: [ 'push', 'gcr.io/${_PROJECT_ID}/${_BACKEND_SERVICE}:latest' ]
  waitFor: [ 'build-backend' ]

# Step 3: Deploy Backend to Cloud Run
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'deploy-backend'
  args: [ 'run', 'deploy', '${_BACKEND_SERVICE}', '--image=gcr.io/${_PROJECT_ID}/${_BACKEND_SERVICE}:${COMMIT_SHA}', '--region=${_REGION}', '--platform=managed', '--memory=4Gi', '--cpu=2', '--min-instances=1', '--max-instances=10', '--port=8080', '--allow-unauthenticated', '--service-account=darwin-runner@${_PROJECT_ID}.iam.gserviceaccount.com', '--set-env-vars=ENVIRONMENT=production,PROJECT_ID=${_PROJECT_ID},GOOGLE_CLOUD_PROJECT=${_PROJECT_ID}', '--set-secrets=OPENAI_API_KEY=openai-api-key:latest,ANTHROPIC_API_KEY=anthropic-api-key:latest,GOOGLE_AI_API_KEY=google-ai-api-key:latest,DARWIN_SERVER_KEY=darwin-server-key:latest', '--concurrency=100', '--timeout=300', '--execution-environment=gen2' ]
  waitFor: [ 'push-backend', 'push-backend-latest' ]

# Step 4: Configure Backend Domain Mapping
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'map-backend-domain'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Check if domain mapping exists, create if not
    if ! gcloud run domain-mappings describe ${_BACKEND_DOMAIN} --region=${_REGION} --project=${_PROJECT_ID} &>/dev/null; then
      echo "Creating domain mapping for ${_BACKEND_DOMAIN}..."
      gcloud run domain-mappings create \
        --service=${_BACKEND_SERVICE} \
        --domain=${_BACKEND_DOMAIN} \
        --region=${_REGION} \
        --project=${_PROJECT_ID}
    else
      echo "Domain mapping for ${_BACKEND_DOMAIN} already exists"
    fi
  waitFor: [ 'deploy-backend' ]

# Step 5: Install Frontend Dependencies
- name: 'gcr.io/cloud-builders/npm'
  id: 'install-frontend-deps'
  args: [ 'ci', '--cache', '.npm', '--prefer-offline' ]
  dir: 'darwin/frontend/ui'
  env:
  - 'NPM_CONFIG_CACHE=.npm'

# Step 6: Build Frontend Application
- name: 'gcr.io/cloud-builders/npm'
  id: 'build-frontend'
  args: [ 'run', 'build' ]
  dir: 'darwin/frontend/ui'
  env:
  - 'NODE_ENV=production'
  - 'NEXT_PUBLIC_API_URL=https://${_BACKEND_DOMAIN}'
  - 'NEXT_PUBLIC_DARWIN_URL=https://${_BACKEND_DOMAIN}'
  - 'NEXT_PUBLIC_ENVIRONMENT=production'
  - 'NEXT_TELEMETRY_DISABLED=1'
  waitFor: [ 'install-frontend-deps' ]
  timeout: 300s

# Step 7: Build Frontend Docker Image
- name: 'gcr.io/cloud-builders/docker'
  id: 'build-frontend-image'
  args: [ 'build', '-t', 'gcr.io/${_PROJECT_ID}/${_FRONTEND_SERVICE}:${COMMIT_SHA}', '-t', 'gcr.io/${_PROJECT_ID}/${_FRONTEND_SERVICE}:latest', '-f', 'darwin/frontend/ui/Dockerfile.production', './darwin/frontend/ui' ]
  waitFor: [ 'build-frontend' ]
  timeout: 400s

# Step 8: Push Frontend Image to GCR
- name: 'gcr.io/cloud-builders/docker'
  id: 'push-frontend'
  args: [ 'push', 'gcr.io/${_PROJECT_ID}/${_FRONTEND_SERVICE}:${COMMIT_SHA}' ]
  waitFor: [ 'build-frontend-image' ]

- name: 'gcr.io/cloud-builders/docker'
  id: 'push-frontend-latest'
  args: [ 'push', 'gcr.io/${_PROJECT_ID}/${_FRONTEND_SERVICE}:latest' ]
  waitFor: [ 'build-frontend-image' ]

# Step 9: Deploy Frontend to Cloud Run
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'deploy-frontend'
  args: [ 'run', 'deploy', '${_FRONTEND_SERVICE}', '--image=gcr.io/${_PROJECT_ID}/${_FRONTEND_SERVICE}:${COMMIT_SHA}', '--region=${_REGION}', '--platform=managed', '--memory=2Gi', '--cpu=1', '--min-instances=0', '--max-instances=5', '--port=3000', '--allow-unauthenticated', '--set-env-vars=NEXT_PUBLIC_API_URL=https://${_BACKEND_DOMAIN},NEXT_PUBLIC_DARWIN_URL=https://${_BACKEND_DOMAIN},NEXT_PUBLIC_ENVIRONMENT=production,DARWIN_SERVER_KEY=darwin-prod-key-2024-secure', '--concurrency=50', '--timeout=60', '--execution-environment=gen2' ]
  waitFor: [ 'push-frontend', 'push-frontend-latest' ]

# Step 10: Configure Frontend Domain Mapping
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'map-frontend-domain'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Check if domain mapping exists, create if not
    if ! gcloud run domain-mappings describe ${_FRONTEND_DOMAIN} --region=${_REGION} --project=${_PROJECT_ID} &>/dev/null; then
      echo "Creating domain mapping for ${_FRONTEND_DOMAIN}..."
      gcloud run domain-mappings create \
        --service=${_FRONTEND_SERVICE} \
        --domain=${_FRONTEND_DOMAIN} \
        --region=${_REGION} \
        --project=${_PROJECT_ID}
    else
      echo "Domain mapping for ${_FRONTEND_DOMAIN} already exists"
    fi
  waitFor: [ 'deploy-frontend' ]

# Step 11: Health Check Tests
- name: 'gcr.io/cloud-builders/curl'
  id: 'test-backend-health'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "Testing backend health..."
    for i in {1..5}; do
      if curl -f -s "https://${_BACKEND_DOMAIN}/healthz"; then
        echo "‚úÖ Backend health check passed"
        break
      fi
      echo "‚è≥ Attempt $i failed, retrying in 10s..."
      sleep 10
    done
  waitFor: [ 'map-backend-domain' ]

- name: 'gcr.io/cloud-builders/curl'
  id: 'test-frontend-health'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "Testing frontend health..."
    for i in {1..5}; do
      if curl -f -s "https://${_FRONTEND_DOMAIN}/api/health"; then
        echo "‚úÖ Frontend health check passed"
        break
      fi
      echo "‚è≥ Attempt $i failed, retrying in 10s..."
      sleep 10
    done
  waitFor: [ 'map-frontend-domain' ]

# Step 12: Integration Test
- name: 'gcr.io/cloud-builders/curl'
  id: 'test-integration'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "Testing frontend ‚Üí backend integration..."
    # Test if frontend can proxy to backend
    if curl -f -s "https://${_FRONTEND_DOMAIN}/api/health" | grep -q "healthy\|status"; then
      echo "‚úÖ Frontend ‚Üí Backend integration working"
    else
      echo "‚ùå Integration test failed"
      exit 1
    fi
  waitFor: [ 'test-backend-health', 'test-frontend-health' ]

# Step 13: Deployment Summary
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'deployment-summary'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo ""
    echo "üéâ DARWIN Deployment Summary"
    echo "============================="
    echo "‚úÖ Backend URL: https://${_BACKEND_DOMAIN}"
    echo "‚úÖ Frontend URL: https://${_FRONTEND_DOMAIN}"
    echo "‚úÖ Project: ${_PROJECT_ID}"
    echo "‚úÖ Region: ${_REGION}"
    echo "‚úÖ Commit: ${COMMIT_SHA}"
    echo "‚úÖ Build ID: ${BUILD_ID}"
    echo ""
    echo "üìä Service Status:"
    gcloud run services describe ${_BACKEND_SERVICE} --region=${_REGION} --format="table(metadata.name,status.url,status.conditions.type:sort=1)"
    gcloud run services describe ${_FRONTEND_SERVICE} --region=${_REGION} --format="table(metadata.name,status.url,status.conditions.type:sort=1)"
    echo ""
    echo "üöÄ DARWIN Meta-Research Brain deployed successfully!"
  waitFor: [ 'test-integration' ]

# ============================================================================
# Artifacts and Images
# ============================================================================
images:
- 'gcr.io/${_PROJECT_ID}/${_BACKEND_SERVICE}:${COMMIT_SHA}'
- 'gcr.io/${_PROJECT_ID}/${_BACKEND_SERVICE}:latest'
- 'gcr.io/${_PROJECT_ID}/${_FRONTEND_SERVICE}:${COMMIT_SHA}'
- 'gcr.io/${_PROJECT_ID}/${_FRONTEND_SERVICE}:latest'

# ============================================================================
# Build Artifacts
# ============================================================================
artifacts:
  objects:
    location: 'gs://${_PROJECT_ID}-build-artifacts'
    paths:
    - 'darwin/frontend/ui/.next/**/*'
    - 'darwin/backend/kec_unified_api/logs/*'
