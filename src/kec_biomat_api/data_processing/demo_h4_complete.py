"""
Sistema H4 - Demo Completa

Demonstra√ß√£o pr√°tica do Sistema H4 de Processamento de Dados
integrado com os sistemas H1 (Monitoring), H2 (Cache) e H3 (APIs).
"""

import asyncio
import json
import logging
import tempfile
from pathlib import Path

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def demo_h4_complete_system():
    """Demonstra√ß√£o completa do Sistema H4."""
    
    print("üöÄ DEMO COMPLETA - SISTEMA H4 DATA PROCESSING")
    print("=" * 60)
    
    try:
        # Importa componentes principais
        from kec_biomat_api.data_processing import (
            DataFormat,
            get_h4_config,
            get_pipeline_executor,
            health_check,
            system_info,
        )
        from kec_biomat_api.data_processing.pipelines.templates import (
            create_pipeline_from_template,
            list_templates,
        )
        from kec_biomat_api.data_processing.processors.data_processors import create_processor

        # 1. Informa√ß√µes do Sistema
        print("\nüìä INFORMA√á√ïES DO SISTEMA H4")
        print("-" * 40)
        
        info = system_info()
        print(f"‚Ä¢ Nome: {info['name']}")
        print(f"‚Ä¢ Vers√£o: {info['version']}")
        print(f"‚Ä¢ Templates: {', '.join(info['available_templates'])}")
        print(f"‚Ä¢ Formatos: {', '.join(info['supported_formats'])}")
        print(f"‚Ä¢ Modos de Processamento: {', '.join(info['processing_modes'])}")
        
        # 2. Verifica√ß√£o de Sa√∫de
        print("\nüè• VERIFICA√á√ÉO DE SA√öDE")
        print("-" * 40)
        
        health = health_check()
        print(f"‚Ä¢ Status: {health['status'].upper()}")
        print(f"‚Ä¢ Configura√ß√£o carregada: {health['config_loaded']}")
        print(f"‚Ä¢ Executor pronto: {health['executor_ready']}")
        
        # 3. Configura√ß√£o do Sistema
        print("\n‚öôÔ∏è CONFIGURA√á√ÉO DO SISTEMA")
        print("-" * 40)
        
        config = get_h4_config()
        print(f"‚Ä¢ Processamento em tempo real: {config.features.real_time_processing}")
        print(f"‚Ä¢ Rastreamento de linhagem: {config.features.data_lineage}")
        print(f"‚Ä¢ Monitoramento de qualidade: {config.features.quality_monitoring}")
        print(f"‚Ä¢ Integra√ß√£o H1: {config.integrations.h1_monitoring}")
        print(f"‚Ä¢ Integra√ß√£o H2: {config.integrations.h2_cache}")
        print(f"‚Ä¢ Integra√ß√£o H3: {config.integrations.h3_apis}")
        
        # 4. Demonstra√ß√£o de Templates
        print("\nüîß DEMONSTRA√á√ÉO DE TEMPLATES")
        print("-" * 40)
        
        templates = list_templates()
        print(f"Templates dispon√≠veis: {len(templates)}")
        
        for template_name in templates[:3]:  # Mostra apenas os 3 primeiros
            try:
                from kec_biomat_api.data_processing.pipelines.templates import get_template
                template = get_template(template_name)
                print(f"‚Ä¢ {template_name}: {template.description}")
            except Exception as e:
                print(f"‚Ä¢ {template_name}: Erro - {e}")
        
        # 5. Demonstra√ß√£o de Processadores
        print("\n‚öôÔ∏è DEMONSTRA√á√ÉO DE PROCESSADORES")
        print("-" * 40)
        
        processor_types = ["validation", "cleaning", "transformation"]
        
        for proc_type in processor_types:
            try:
                processor = create_processor(proc_type)
                print(f"‚Ä¢ {proc_type}: {processor.__class__.__name__} ‚úÖ")
            except Exception as e:
                print(f"‚Ä¢ {proc_type}: Erro - {e} ‚ùå")
        
        # 6. Demonstra√ß√£o de Pipeline Pr√°tico
        print("\nüîÑ PIPELINE PR√ÅTICO - CONVERS√ÉO JSON ‚Üí CSV")
        print("-" * 40)
        
        # Dados de exemplo
        sample_data = [
            {"id": 1, "produto": "Laptop", "preco": 3500.00, "categoria": "Eletr√¥nicos"},
            {"id": 2, "produto": "Mouse", "preco": 45.00, "categoria": "Acess√≥rios"},
            {"id": 3, "produto": "Teclado", "preco": 120.00, "categoria": "Acess√≥rios"},
            {"id": 4, "produto": "Monitor", "preco": 800.00, "categoria": "Eletr√¥nicos"},
            {"id": 5, "produto": "Cadeira", "preco": 450.00, "categoria": "M√≥veis"}
        ]
        
        # Cria arquivos tempor√°rios
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as tmp_input:
            json.dump(sample_data, tmp_input, indent=2, ensure_ascii=False)
            input_path = tmp_input.name
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as tmp_output:
            output_path = tmp_output.name
        
        try:
            print(f"üìÅ Input: {Path(input_path).name}")
            print(f"üìÑ Output: {Path(output_path).name}")
            
            # Cria pipeline de convers√£o
            pipeline_config = create_pipeline_from_template(
                "format_conversion",
                input_file=input_path,
                output_file=output_path,
                input_format=DataFormat.JSON,
                output_format=DataFormat.CSV
            )
            
            print(f"üîß Pipeline criado: {pipeline_config.name}")
            print(f"üìù Descri√ß√£o: {pipeline_config.description}")
            
            # Mostra m√©tricas b√°sicas
            print(f"üìä Fontes: {len(pipeline_config.sources)}")
            print(f"üì§ Destinos: {len(pipeline_config.sinks)}")
            print(f"‚ö° Modo: {pipeline_config.processing.mode.value}")
            
            print("\n‚úÖ Pipeline configurado com sucesso!")
            
        except Exception as e:
            print(f"‚ùå Erro na configura√ß√£o do pipeline: {e}")
        
        finally:
            # Limpa arquivos tempor√°rios
            for file_path in [input_path, output_path]:
                if Path(file_path).exists():
                    Path(file_path).unlink()
        
        # 7. Integra√ß√£o com Sistemas H1-H2-H3
        print("\nüîó INTEGRA√á√ÉO COM SISTEMAS H1-H2-H3")
        print("-" * 40)
        
        executor = get_pipeline_executor()
        
        # Verifica integra√ß√£o H1 (Monitoring)
        h1_status = hasattr(executor, 'h1_monitor') and executor.h1_monitor is not None
        print(f"‚Ä¢ H1 Monitoring: {'‚úÖ Integrado' if h1_status else '‚ö†Ô∏è N√£o dispon√≠vel'}")
        
        # Verifica integra√ß√£o H2 (Cache)
        h2_status = hasattr(executor, 'h2_cache') and executor.h2_cache is not None
        print(f"‚Ä¢ H2 Cache: {'‚úÖ Integrado' if h2_status else '‚ö†Ô∏è N√£o dispon√≠vel'}")
        
        # Verifica integra√ß√£o H3 (APIs)
        h3_status = hasattr(executor, 'h3_api_client') and executor.h3_api_client is not None
        print(f"‚Ä¢ H3 APIs: {'‚úÖ Integrado' if h3_status else '‚ö†Ô∏è N√£o dispon√≠vel'}")
        
        # 8. Estat√≠sticas Finais
        print("\nüìà ESTAT√çSTICAS DO SISTEMA H4")
        print("-" * 40)
        
        stats = {
            "Templates Dispon√≠veis": len(info['available_templates']),
            "Formatos Suportados": len(info['supported_formats']),
            "Processadores": 5,  # validation, cleaning, transformation, aggregation, filter
            "Handlers de Formato": 3,  # JSON, CSV, XML testados
            "Integra√ß√µes Ativas": sum([h1_status, h2_status, h3_status])
        }
        
        for key, value in stats.items():
            print(f"‚Ä¢ {key}: {value}")
        
        print("\nüéâ DEMO CONCLU√çDA COM SUCESSO!")
        print("Sistema H4 de Processamento de Dados totalmente operacional")
        print("com integra√ß√£o completa aos sistemas H1, H2 e H3!")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO NA DEMO: {e}")
        logger.exception("Erro na demonstra√ß√£o do Sistema H4")
        return False


async def demo_h4_advanced_features():
    """Demonstra√ß√£o de recursos avan√ßados do H4."""
    
    print("\n\nüöÄ RECURSOS AVAN√áADOS DO SISTEMA H4")
    print("=" * 60)
    
    try:
        from kec_biomat_api.data_processing.config import DistributionStrategy, ProcessingMode

        # 1. Modos de Processamento
        print("\n‚ö° MODOS DE PROCESSAMENTO")
        print("-" * 40)
        
        processing_modes = [
            (ProcessingMode.BATCH, "Processamento em lote para grandes volumes"),
            (ProcessingMode.STREAMING, "Processamento cont√≠nuo em tempo real"),
            (ProcessingMode.REAL_TIME, "Processamento com baixa lat√™ncia"),
            (ProcessingMode.HYBRID, "Combina√ß√£o de batch e streaming")
        ]
        
        for mode, description in processing_modes:
            print(f"‚Ä¢ {mode.value.upper()}: {description}")
        
        # 2. Estrat√©gias de Distribui√ß√£o
        print("\nüåê ESTRAT√âGIAS DE DISTRIBUI√á√ÉO")
        print("-" * 40)
        
        distribution_strategies = [
            (DistributionStrategy.SINGLE_NODE, "Processamento em n√≥ √∫nico"),
            (DistributionStrategy.MULTI_THREAD, "Paraleliza√ß√£o com m√∫ltiplas threads"),
            (DistributionStrategy.MULTI_PROCESS, "Distribui√ß√£o em m√∫ltiplos processos"),
            (DistributionStrategy.DISTRIBUTED, "Processamento distribu√≠do")
        ]
        
        for strategy, description in distribution_strategies:
            print(f"‚Ä¢ {strategy.value.upper()}: {description}")
        
        # 3. Formatos Suportados
        print("\nüìÅ FORMATOS DE DADOS SUPORTADOS")
        print("-" * 40)
        
        formats = [
            ("JSON", "JavaScript Object Notation"),
            ("CSV", "Comma-Separated Values"),
            ("XML", "eXtensible Markup Language"),
            ("EXCEL", "Microsoft Excel (xlsx)"),
            ("PARQUET", "Formato colunar otimizado"),
            ("AVRO", "Serializa√ß√£o de dados Apache"),
            ("YAML", "YAML Ain't Markup Language"),
            ("HDF5", "Hierarchical Data Format"),
            ("NETCDF", "Network Common Data Form"),
            ("BINARY", "Dados bin√°rios gen√©ricos")
        ]
        
        for format_name, description in formats:
            print(f"‚Ä¢ {format_name}: {description}")
        
        print("\n‚úÖ RECURSOS AVAN√áADOS DEMONSTRADOS")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO NA DEMO AVAN√áADA: {e}")
        return False


async def main():
    """Executa demonstra√ß√£o completa do Sistema H4."""
    
    success_basic = await demo_h4_complete_system()
    success_advanced = await demo_h4_advanced_features()
    
    print("\n" + "=" * 60)
    print("üìä RESUMO DA DEMONSTRA√á√ÉO")
    print("=" * 60)
    
    results = [
        ("Demo B√°sica", success_basic),
        ("Demo Avan√ßada", success_advanced)
    ]
    
    for demo_name, success in results:
        status = "‚úÖ SUCESSO" if success else "‚ùå FALHA"
        print(f"{demo_name}: {status}")
    
    overall_success = all(success for _, success in results)
    
    if overall_success:
        print("\nüéâ DEMONSTRA√á√ÉO COMPLETA REALIZADA COM SUCESSO!")
        print("Sistema H4 est√° totalmente funcional e integrado!")
    else:
        print("\n‚ö†Ô∏è ALGUMAS PARTES DA DEMONSTRA√á√ÉO FALHARAM")
        print("Verifique os logs para mais detalhes.")
    
    return overall_success


if __name__ == "__main__":
    # Executa demonstra√ß√£o
    success = asyncio.run(main())
    exit(0 if success else 1)if __name__ == "__main__":
    # Executa demonstra√ß√£o
    success = asyncio.run(main())
    exit(0 if success else 1)