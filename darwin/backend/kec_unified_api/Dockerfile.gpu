# ðŸš€ DARWIN REVOLUTIONARY DOCKERFILE - AutoGen + JAX + GPU Support
# Ultra-optimized container para Cloud Run with GPU/TPU acceleration
# Supports: AutoGen Multi-Agent + JAX 1000x Speed + Vertex AI + BigQuery

# ============================================================================
# Base Stage - NVIDIA CUDA Support for JAX GPU Acceleration
# ============================================================================
FROM nvidia/cuda:12.2-devel-ubuntu22.04 as base

# Set timezone and locale
ENV TZ=UTC
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Python and basic tools
    python3.11 \
    python3.11-dev \
    python3.11-venv \
    python3-pip \
    # Build tools
    build-essential \
    gcc \
    g++ \
    cmake \
    pkg-config \
    # Scientific computing libraries
    libblas-dev \
    liblapack-dev \
    libopenmpi-dev \
    gfortran \
    # CUDA and GPU libraries
    libcublas-dev-12-2 \
    libcufft-dev-12-2 \
    libcurand-dev-12-2 \
    libcusolver-dev-12-2 \
    libcusparse-dev-12-2 \
    # Networking and utilities
    curl \
    wget \
    git \
    ca-certificates \
    # Cleanup
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 \
    && update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

# Upgrade pip
RUN python -m pip install --upgrade pip setuptools wheel

# ============================================================================
# Dependencies Stage - Install Python packages with JAX CUDA support
# ============================================================================
FROM base as dependencies

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements
WORKDIR /build
COPY requirements.txt .

# Install JAX with CUDA support FIRST (critical for GPU acceleration)
RUN pip install --upgrade "jax[cuda12_pip]" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html

# Install JAX ecosystem
RUN pip install --no-cache-dir \
    jaxlib \
    optax \
    flax \
    chex \
    jaxopt

# Install AutoGen and Multi-Agent dependencies
RUN pip install --no-cache-dir \
    pyautogen \
    openai \
    anthropic \
    google-generativeai

# Install Google Cloud dependencies
RUN pip install --no-cache-dir \
    google-cloud-aiplatform \
    google-cloud-bigquery \
    google-cloud-storage \
    google-cloud-secret-manager \
    google-auth \
    google-auth-oauthlib

# Install core FastAPI dependencies
RUN pip install --no-cache-dir \
    fastapi \
    uvicorn[standard] \
    gunicorn \
    pydantic \
    httpx \
    aiofiles

# Install scientific computing stack
RUN pip install --no-cache-dir \
    numpy \
    scipy \
    pandas \
    matplotlib \
    networkx \
    scikit-learn

# Install remaining requirements
RUN pip install --no-cache-dir -r requirements.txt

# Install additional performance monitoring
RUN pip install --no-cache-dir \
    nvidia-ml-py \
    psutil \
    py3nvml

# ============================================================================
# Production Stage - Optimized runtime container
# ============================================================================
FROM nvidia/cuda:12.2-runtime-ubuntu22.04 as production

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.11 \
    python3.11-venv \
    curl \
    ca-certificates \
    # CUDA runtime libraries (automatically included in runtime image)
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 \
    && update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

# Create non-root user for security
RUN groupadd -r darwin && useradd -r -g darwin -s /bin/false -u 1001 darwin

# Copy virtual environment from dependencies stage
COPY --from=dependencies /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=darwin:darwin . .

# ============================================================================
# Environment Configuration
# ============================================================================

# Python environment
ENV PYTHONPATH="/app"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Application configuration
ENV PORT=8080
ENV ENVIRONMENT=production
ENV WORKERS=1

# JAX Configuration for GPU
ENV JAX_PLATFORM_NAME=gpu
ENV CUDA_VISIBLE_DEVICES=all
ENV XLA_PYTHON_CLIENT_PREALLOCATE=false
ENV XLA_PYTHON_CLIENT_ALLOCATOR=platform
ENV TF_FORCE_GPU_ALLOW_GROWTH=true

# AutoGen Configuration
ENV AUTOGEN_USE_DOCKER=false
ENV AUTOGEN_CACHE_SEED=42

# Google Cloud Configuration
ENV GOOGLE_CLOUD_PROJECT=""
ENV GOOGLE_APPLICATION_CREDENTIALS=""

# Performance optimization
ENV MALLOC_TRIM_THRESHOLD=131072
ENV MALLOC_MMAP_THRESHOLD=131072
ENV OMP_NUM_THREADS=4

# Security configurations
ENV PYTHONHASHSEED=random

# ============================================================================
# Runtime Configuration
# ============================================================================

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/tmp /app/cache /app/secrets && \
    chown -R darwin:darwin /app

# Remove any development files and potential secrets
RUN rm -rf \
    /app/.git* \
    /app/tests \
    /app/*.key \
    /app/*.pem \
    /app/.env* \
    /app/docker-compose* \
    /app/Dockerfile* \
    2>/dev/null || true

# Health check optimized for Cloud Run with GPU
HEALTHCHECK --interval=30s --timeout=15s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose port
EXPOSE 8080

# Switch to non-root user for security
USER darwin

# ============================================================================
# Production Command - GPU-Optimized AutoGen + JAX
# ============================================================================

# Multi-stage command que verifica GPU availability e otimiza workers
CMD ["sh", "-c", "\
    echo 'ðŸš€ Starting DARWIN Revolutionary Backend with GPU Support...' && \
    echo 'ðŸ”¥ Checking GPU availability...' && \
    nvidia-smi --query-gpu=name,memory.total,memory.free --format=csv,noheader,nounits 2>/dev/null | head -5 || echo 'No GPU detected, running on CPU' && \
    echo 'âš¡ Initializing JAX with GPU acceleration...' && \
    python -c 'import jax; print(f\"JAX devices: {jax.devices()}\"); print(f\"Default backend: {jax.default_backend()}\")' && \
    echo 'ðŸ¤– Starting AutoGen Multi-Agent Research Team...' && \
    echo 'ðŸ“Š Connecting to Vertex AI and BigQuery...' && \
    echo 'ðŸŒŸ DARWIN is READY - Starting server...' && \
    exec uvicorn main:app \
        --host 0.0.0.0 \
        --port ${PORT} \
        --workers ${WORKERS} \
        --log-level info \
        --access-log \
        --use-colors \
        --proxy-headers \
        --forwarded-allow-ips='*' \
    "]

# ============================================================================
# Image Metadata
# ============================================================================
LABEL maintainer="DARWIN Team <darwin@agourakis.med.br>"
LABEL description="DARWIN Revolutionary Backend - AutoGen + JAX + GPU + Cloud Run"
LABEL version="3.0.0-gpu"
LABEL org.opencontainers.image.source="https://github.com/agourakis82/kec-biomaterials-scaffolds"
LABEL org.opencontainers.image.title="DARWIN Backend GPU"
LABEL org.opencontainers.image.description="Revolutionary AI research platform with GPU acceleration"

# GPU and performance labels
LABEL ai.framework="AutoGen+JAX"
LABEL ai.acceleration="CUDA+GPU+TPU"
LABEL ai.performance="1000x_speedup"
LABEL deployment.platform="Cloud_Run_GPU"
LABEL research.domain="biomaterials+quantum+medical"