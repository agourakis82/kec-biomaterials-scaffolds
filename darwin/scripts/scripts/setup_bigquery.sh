#!/bin/bash

# BIGQUERY SETUP REVOLUTIONARY SCRIPT
# Setup completo de datasets e tables BigQuery para DARWIN
# üìä BIGQUERY SETUP AUTOMATION - MILLION SCAFFOLD READY

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ID="${GCP_PROJECT_ID:-darwin-biomaterials-scaffolds}"
LOCATION="${GCP_LOCATION:-us-central1}"
SERVICE_ACCOUNT_KEY="${DATA_PIPELINE_KEY:-./secrets/data-pipeline-key.json}"

# Dataset names
DATASETS=(
    "darwin_research_insights"
    "darwin_performance_metrics"
    "darwin_scaffold_results"
    "darwin_training_logs"
    "darwin_collaboration_data"
    "darwin_real_time_analytics"
)

# Logging functions
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå${NC} $1"
}

log_header() {
    echo -e "${PURPLE}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë  üìä DARWIN BIGQUERY SETUP REVOLUTIONARY AUTOMATION üìä      ‚ïë
‚ïë                                                              ‚ïë
‚ïë  Setting up BigQuery infrastructure for DARWIN:             ‚ïë
‚ïë  ‚Ä¢ Research Insights Dataset                                ‚ïë
‚ïë  ‚Ä¢ Million Scaffold Results Pipeline                        ‚ïë
‚ïë  ‚Ä¢ Performance Metrics Tracking                             ‚ïë
‚ïë  ‚Ä¢ Collaboration Analytics                                   ‚ïë
‚ïë  ‚Ä¢ Real-time Dashboard Data                                 ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}
"
}

# Check prerequisites
check_prerequisites() {
    log "üîç Checking BigQuery prerequisites..."
    
    # Check bq command
    if ! command -v bq &> /dev/null; then
        log_error "bq command not found. Please install Google Cloud SDK"
        exit 1
    fi
    
    # Check authentication
    if [[ -f "$SERVICE_ACCOUNT_KEY" ]]; then
        export GOOGLE_APPLICATION_CREDENTIALS="$SERVICE_ACCOUNT_KEY"
        log_success "Using service account key: $SERVICE_ACCOUNT_KEY"
    else
        log_warning "Service account key not found, using default credentials"
    fi
    
    # Set project
    bq config set project_id "$PROJECT_ID"
    
    log_success "Prerequisites check completed"
}

# Create datasets
create_datasets() {
    log "üìä Creating BigQuery datasets..."
    
    for dataset in "${DATASETS[@]}"; do
        log "Creating dataset: $dataset"
        
        # Create dataset with proper configuration
        if bq mk --dataset \
            --description="DARWIN dataset for $dataset - Million scaffold processing and research insights" \
            --location="$LOCATION" \
            --default_table_expiration=15552000 \
            --labels="project:darwin,environment:production,component:bigquery" \
            "$PROJECT_ID:$dataset" 2>/dev/null; then
            log_success "Created dataset: $dataset"
        else
            log_warning "Dataset $dataset might already exist"
        fi
        
        # Set dataset permissions
        log "Setting permissions for dataset: $dataset"
        
        # Grant access to service accounts
        bq update --dataset \
            --access_config="role:WRITER,userByEmail:vertex-ai-darwin-main@$PROJECT_ID.iam.gserviceaccount.com" \
            --access_config="role:WRITER,userByEmail:darwin-data-pipeline@$PROJECT_ID.iam.gserviceaccount.com" \
            --access_config="role:READER,userByEmail:darwin-model-training@$PROJECT_ID.iam.gserviceaccount.com" \
            "$PROJECT_ID:$dataset" || log_warning "Failed to set permissions for $dataset"
    done
    
    log_success "All datasets created successfully"
}

# Create research insights table
create_research_insights_table() {
    log "üß† Creating research insights table..."
    
    local dataset="darwin_research_insights"
    local table="insights"
    local table_id="$PROJECT_ID:$dataset.$table"
    
    # Create table with schema
    bq mk --table \
        --description="DARWIN Research Team Insights - AutoGen Collaborative Intelligence" \
        --time_partitioning_field="timestamp" \
        --time_partitioning_type="DAY" \
        --clustering_fields="agent_specialization,research_id" \
        --labels="component:research,type:insights" \
        "$table_id" \
        "insight_id:STRING:REQUIRED,research_id:STRING:REQUIRED,agent_specialization:STRING:REQUIRED,insight_content:STRING:REQUIRED,confidence_score:FLOAT:REQUIRED,insight_type:STRING:REQUIRED,evidence_sources:STRING:REPEATED,timestamp:TIMESTAMP:REQUIRED,domain_tags:STRING:REPEATED,collaboration_context:STRING,cross_domain_connections:STRING:REPEATED" \
        || log_warning "Research insights table might already exist"
    
    log_success "Research insights table created"
}

# Create scaffold results table
create_scaffold_results_table() {
    log "üß¨ Creating scaffold results table..."
    
    local dataset="darwin_scaffold_results" 
    local table="scaffold_analysis"
    local table_id="$PROJECT_ID:$dataset.$table"
    
    # Create table with schema optimized for million scaffolds
    bq mk --table \
        --description="DARWIN Scaffold Analysis Results - Million Scaffold Processing Pipeline" \
        --time_partitioning_field="timestamp" \
        --time_partitioning_type="DAY" \
        --clustering_fields="scaffold_id,analysis_id" \
        --labels="component:scaffold,type:analysis,scale:million" \
        "$table_id" \
        "scaffold_id:STRING:REQUIRED,analysis_id:STRING:REQUIRED,h_spectral:FLOAT,k_forman_mean:FLOAT,sigma:FLOAT,swp:FLOAT,material_properties:JSON,biocompatibility_score:FLOAT,computation_time_ms:FLOAT:REQUIRED,jax_speedup_factor:FLOAT,memory_usage_mb:FLOAT,gpu_utilization:FLOAT,timestamp:TIMESTAMP:REQUIRED,metadata:JSON" \
        || log_warning "Scaffold results table might already exist"
    
    log_success "Scaffold results table created"
}

# Create collaboration data table
create_collaboration_table() {
    log "ü§ù Creating collaboration data table..."
    
    local dataset="darwin_collaboration_data"
    local table="collaborations"
    local table_id="$PROJECT_ID:$dataset.$table"
    
    # Create collaboration table
    bq mk --table \
        --description="DARWIN Agent Collaborations - AutoGen Team Performance Analytics" \
        --time_partitioning_field="timestamp" \
        --time_partitioning_type="DAY" \
        --clustering_fields="collaboration_id" \
        --labels="component:autogen,type:collaboration" \
        "$table_id" \
        "collaboration_id:STRING:REQUIRED,research_question:STRING:REQUIRED,participating_agents:STRING:REPEATED,insights_generated:INTEGER:REQUIRED,collaboration_duration_ms:FLOAT:REQUIRED,success_score:FLOAT:REQUIRED,interdisciplinary_connections:INTEGER:REQUIRED,novel_insights_count:INTEGER:REQUIRED,domain_coverage:STRING:REPEATED,timestamp:TIMESTAMP:REQUIRED" \
        || log_warning "Collaboration table might already exist"
    
    log_success "Collaboration data table created"
}

# Create performance metrics table
create_performance_table() {
    log "‚ö° Creating performance metrics table..."
    
    local dataset="darwin_performance_metrics"
    local table="performance_metrics"
    local table_id="$PROJECT_ID:$dataset.$table"
    
    # Create performance table
    bq mk --table \
        --description="DARWIN Performance Metrics - JAX Ultra-Performance Tracking" \
        --time_partitioning_field="timestamp" \
        --time_partitioning_type="DAY" \
        --clustering_fields="component,operation" \
        --labels="component:performance,type:metrics" \
        "$table_id" \
        "session_id:STRING:REQUIRED,component:STRING:REQUIRED,operation:STRING:REQUIRED,duration_ms:FLOAT:REQUIRED,throughput:FLOAT,memory_usage_mb:FLOAT,cpu_usage_percent:FLOAT,gpu_usage_percent:FLOAT,success:BOOLEAN:REQUIRED,error_message:STRING,jax_compilation_time:FLOAT,speedup_factor:FLOAT,timestamp:TIMESTAMP:REQUIRED" \
        || log_warning "Performance metrics table might already exist"
    
    log_success "Performance metrics table created"
}

# Create real-time analytics table
create_real_time_analytics_table() {
    log "üìà Creating real-time analytics table..."
    
    local dataset="darwin_real_time_analytics"
    local table="live_metrics"
    local table_id="$PROJECT_ID:$dataset.$table"
    
    # Create real-time analytics table
    bq mk --table \
        --description="DARWIN Real-time Analytics - Live Dashboard Data" \
        --time_partitioning_field="timestamp" \
        --time_partitioning_type="HOUR" \
        --clustering_fields="metric_type" \
        --labels="component:analytics,type:realtime" \
        "$table_id" \
        "metric_id:STRING:REQUIRED,metric_type:STRING:REQUIRED,metric_value:FLOAT:REQUIRED,metric_unit:STRING,component:STRING:REQUIRED,aggregation_period:STRING,metadata:JSON,timestamp:TIMESTAMP:REQUIRED" \
        || log_warning "Real-time analytics table might already exist"
    
    log_success "Real-time analytics table created"
}

# Create training logs table
create_training_logs_table() {
    log "üìö Creating training logs table..."
    
    local dataset="darwin_training_logs"
    local table="model_training"
    local table_id="$PROJECT_ID:$dataset.$table"
    
    # Create training logs table
    bq mk --table \
        --description="DARWIN Model Training Logs - Custom Model Development Tracking" \
        --time_partitioning_field="timestamp" \
        --time_partitioning_type="DAY" \
        --clustering_fields="model_name,training_job_id" \
        --labels="component:training,type:logs" \
        "$table_id" \
        "training_job_id:STRING:REQUIRED,model_name:STRING:REQUIRED,model_type:STRING:REQUIRED,training_stage:STRING:REQUIRED,epoch:INTEGER,loss_value:FLOAT,accuracy:FLOAT,learning_rate:FLOAT,batch_size:INTEGER,training_examples:INTEGER,validation_score:FLOAT,training_time_minutes:FLOAT,gpu_utilization:FLOAT,status:STRING:REQUIRED,error_message:STRING,hyperparameters:JSON,timestamp:TIMESTAMP:REQUIRED" \
        || log_warning "Training logs table might already exist"
    
    log_success "Training logs table created"
}

# Create all tables
create_tables() {
    log "üèóÔ∏è Creating all BigQuery tables..."
    
    create_research_insights_table
    create_scaffold_results_table
    create_collaboration_table
    create_performance_table
    create_real_time_analytics_table
    create_training_logs_table
    
    log_success "All tables created successfully"
}

# Create analytics views
create_analytics_views() {
    log "üìä Creating analytics views..."
    
    # Performance dashboard view
    local view_id="$PROJECT_ID:darwin_real_time_analytics.performance_dashboard"
    
    bq mk --view \
        --description="DARWIN Performance Dashboard - Real-time Performance Metrics" \
        --labels="component:dashboard,type:view" \
        "$view_id" \
        "SELECT 
            component,
            operation,
            AVG(duration_ms) as avg_duration_ms,
            AVG(throughput) as avg_throughput,
            AVG(speedup_factor) as avg_speedup_factor,
            COUNT(*) as operation_count,
            SUM(CASE WHEN success THEN 1 ELSE 0 END) / COUNT(*) as success_rate,
            MAX(timestamp) as last_update
        FROM \`$PROJECT_ID.darwin_performance_metrics.performance_metrics\`
        WHERE timestamp >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 HOUR)
        GROUP BY component, operation" \
        || log_warning "Performance dashboard view might already exist"
    
    # Scaffold analytics view
    view_id="$PROJECT_ID:darwin_real_time_analytics.scaffold_summary"
    
    bq mk --view \
        --description="DARWIN Scaffold Analytics - KEC Metrics Summary" \
        --labels="component:scaffold,type:analytics" \
        "$view_id" \
        "SELECT 
            COUNT(*) as total_scaffolds,
            AVG(h_spectral) as avg_h_spectral,
            AVG(k_forman_mean) as avg_k_forman_mean,
            AVG(sigma) as avg_sigma,
            AVG(swp) as avg_swp,
            AVG(biocompatibility_score) as avg_biocompatibility,
            AVG(computation_time_ms) as avg_computation_time,
            AVG(jax_speedup_factor) as avg_speedup_factor,
            EXTRACT(DATE FROM timestamp) as analysis_date
        FROM \`$PROJECT_ID.darwin_scaffold_results.scaffold_analysis\`
        WHERE timestamp >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY)
        GROUP BY EXTRACT(DATE FROM timestamp)
        ORDER BY analysis_date DESC" \
        || log_warning "Scaffold summary view might already exist"
    
    # Research insights view
    view_id="$PROJECT_ID:darwin_real_time_analytics.research_insights_summary"
    
    bq mk --view \
        --description="DARWIN Research Insights Summary - Agent Collaboration Analytics" \
        --labels="component:research,type:insights" \
        "$view_id" \
        "SELECT 
            agent_specialization,
            COUNT(*) as insights_count,
            AVG(confidence_score) as avg_confidence,
            COUNT(DISTINCT research_id) as unique_research_sessions,
            ARRAY_AGG(DISTINCT domain_tags IGNORE NULLS) as all_domains,
            MAX(timestamp) as latest_insight
        FROM \`$PROJECT_ID.darwin_research_insights.insights\`,
        UNNEST(domain_tags) as domain_tags
        WHERE timestamp >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 24 HOUR)
        GROUP BY agent_specialization" \
        || log_warning "Research insights view might already exist"
    
    log_success "Analytics views created"
}

# Test data insertion
test_data_insertion() {
    log "üß™ Testing data insertion capabilities..."
    
    # Test research insights insertion
    local test_query="INSERT INTO \`$PROJECT_ID.darwin_research_insights.insights\`
    (insight_id, research_id, agent_specialization, insight_content, confidence_score, insight_type, evidence_sources, timestamp, domain_tags)
    VALUES 
    ('test-insight-$(date +%s)', 'test-research-001', 'biomaterials', 'Test insight for BigQuery validation', 0.95, 'analysis', ['test_data'], CURRENT_TIMESTAMP(), ['biomaterials', 'testing'])"
    
    if bq query --use_legacy_sql=false "$test_query"; then
        log_success "Research insights insertion test passed"
    else
        log_warning "Research insights insertion test failed"
    fi
    
    # Test scaffold results insertion
    test_query="INSERT INTO \`$PROJECT_ID.darwin_scaffold_results.scaffold_analysis\`
    (scaffold_id, analysis_id, h_spectral, k_forman_mean, sigma, swp, biocompatibility_score, computation_time_ms, jax_speedup_factor, timestamp)
    VALUES 
    ('test-scaffold-$(date +%s)', 'test-analysis-001', 7.25, 0.31, 2.15, 0.78, 0.85, 15.3, 847.2, CURRENT_TIMESTAMP())"
    
    if bq query --use_legacy_sql=false "$test_query"; then
        log_success "Scaffold results insertion test passed"
    else
        log_warning "Scaffold results insertion test failed"
    fi
    
    # Test performance metrics insertion
    test_query="INSERT INTO \`$PROJECT_ID.darwin_performance_metrics.performance_metrics\`
    (session_id, component, operation, duration_ms, throughput, success, timestamp)
    VALUES 
    ('test-session-$(date +%s)', 'jax_engine', 'batch_processing', 1250.5, 125.7, true, CURRENT_TIMESTAMP())"
    
    if bq query --use_legacy_sql=false "$test_query"; then
        log_success "Performance metrics insertion test passed"
    else
        log_warning "Performance metrics insertion test failed"
    fi
    
    log_success "Data insertion tests completed"
}

# Create scheduled queries for automated analytics
create_scheduled_queries() {
    log "‚è∞ Creating scheduled queries for automated analytics..."
    
    # Daily scaffold summary query
    local scheduled_query="CREATE OR REPLACE TABLE \`$PROJECT_ID.darwin_real_time_analytics.daily_scaffold_summary\`
    PARTITION BY analysis_date
    CLUSTER BY material_type
    AS
    SELECT 
        EXTRACT(DATE FROM timestamp) as analysis_date,
        JSON_EXTRACT_SCALAR(material_properties, '$.material_type') as material_type,
        COUNT(*) as scaffolds_analyzed,
        AVG(h_spectral) as avg_h_spectral,
        AVG(k_forman_mean) as avg_k_forman_mean,  
        AVG(sigma) as avg_sigma,
        AVG(swp) as avg_swp,
        AVG(biocompatibility_score) as avg_biocompatibility,
        AVG(jax_speedup_factor) as avg_speedup_factor,
        STDDEV(h_spectral) as std_h_spectral,
        MIN(computation_time_ms) as min_computation_time,
        MAX(computation_time_ms) as max_computation_time,
        COUNT(CASE WHEN biocompatibility_score > 0.8 THEN 1 END) as high_biocompatibility_count,
        COUNT(CASE WHEN biocompatibility_score BETWEEN 0.5 AND 0.8 THEN 1 END) as medium_biocompatibility_count,
        COUNT(CASE WHEN biocompatibility_score < 0.5 THEN 1 END) as low_biocompatibility_count
    FROM \`$PROJECT_ID.darwin_scaffold_results.scaffold_analysis\`
    WHERE timestamp >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)
    GROUP BY analysis_date, material_type"
    
    if bq query --use_legacy_sql=false "$scheduled_query"; then
        log_success "Daily scaffold summary table created"
    else
        log_warning "Daily scaffold summary creation failed"
    fi
    
    # Weekly collaboration summary
    scheduled_query="CREATE OR REPLACE TABLE \`$PROJECT_ID.darwin_real_time_analytics.weekly_collaboration_summary\`
    PARTITION BY collaboration_week
    AS
    SELECT 
        EXTRACT(WEEK FROM timestamp) as collaboration_week,
        EXTRACT(YEAR FROM timestamp) as collaboration_year,
        COUNT(*) as total_collaborations,
        COUNT(DISTINCT research_question) as unique_research_questions,
        AVG(success_score) as avg_success_score,
        AVG(insights_generated) as avg_insights_per_collaboration,
        AVG(collaboration_duration_ms) as avg_duration_ms,
        SUM(interdisciplinary_connections) as total_interdisciplinary_connections,
        COUNT(CASE WHEN ARRAY_LENGTH(participating_agents) > 3 THEN 1 END) as multi_agent_collaborations,
        STRING_AGG(DISTINCT participating_agents) as all_participating_agents
    FROM \`$PROJECT_ID.darwin_collaboration_data.collaborations\`,
    UNNEST(participating_agents) as participating_agents
    WHERE timestamp >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 12 WEEK)
    GROUP BY collaboration_week, collaboration_year"
    
    if bq query --use_legacy_sql=false "$scheduled_query"; then
        log_success "Weekly collaboration summary table created"
    else
        log_warning "Weekly collaboration summary creation failed"
    fi
    
    log_success "Scheduled queries created"
}

# Setup data retention policies
setup_data_retention() {
    log "üóÇÔ∏è Setting up data retention policies..."
    
    # Set table expiration for different data types
    local datasets_retention=(
        "darwin_research_insights:365"      # 1 year for research data
        "darwin_scaffold_results:730"      # 2 years for scaffold results 
        "darwin_performance_metrics:90"    # 3 months for performance data
        "darwin_collaboration_data:365"    # 1 year for collaboration data
        "darwin_real_time_analytics:30"    # 1 month for real-time data
        "darwin_training_logs:180"         # 6 months for training logs
    )
    
    for entry in "${datasets_retention[@]}"; do
        local dataset="${entry%:*}"
        local days="${entry#*:}"
        local seconds=$((days * 24 * 3600))
        
        log "Setting retention for $dataset: $days days"
        
        bq update --dataset \
            --default_table_expiration="$seconds" \
            "$PROJECT_ID:$dataset" || log_warning "Failed to set retention for $dataset"
    done
    
    log_success "Data retention policies configured"
}

# Verify setup
verify_bigquery_setup() {
    log "üîç Verifying BigQuery setup..."
    
    # Check datasets
    log "Checking datasets..."
    for dataset in "${DATASETS[@]}"; do
        if bq show --dataset "$PROJECT_ID:$dataset" &>/dev/null; then
            log_success "Dataset verified: $dataset"
        else
            log_error "Dataset missing: $dataset"
        fi
    done
    
    # Check key tables
    local key_tables=(
        "darwin_research_insights.insights"
        "darwin_scaffold_results.scaffold_analysis"
        "darwin_performance_metrics.performance_metrics"
        "darwin_collaboration_data.collaborations"
    )
    
    log "Checking tables..."
    for table in "${key_tables[@]}"; do
        if bq show --table "$PROJECT_ID:$table" &>/dev/null; then
            log_success "Table verified: $table"
        else
            log_error "Table missing: $table"
        fi
    done
    
    # Test query performance
    log "Testing query performance..."
    local test_query="SELECT COUNT(*) as table_count FROM \`$PROJECT_ID.darwin_research_insights.insights\` WHERE timestamp >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 DAY)"
    
    if bq query --use_legacy_sql=false --max_rows=1 "$test_query" &>/dev/null; then
        log_success "Query performance test passed"
    else
        log_warning "Query performance test failed"
    fi
    
    log_success "BigQuery setup verification completed"
}

# Generate setup summary
generate_setup_summary() {
    log "üìã Generating BigQuery setup summary..."
    
    local summary_file="bigquery_setup_summary_$(date +%Y%m%d_%H%M%S).md"
    
    cat > "$summary_file" << EOF
# DARWIN BigQuery Setup Summary

**Setup Date**: $(date)
**Project**: $PROJECT_ID
**Location**: $LOCATION

## üìä Datasets Created

$(for dataset in "${DATASETS[@]}"; do
    echo "- ‚úÖ **$dataset**: Production ready"
done)

## üèóÔ∏è Tables Created

### Research Insights
- **darwin_research_insights.insights**: AutoGen collaboration insights
- Partitioned by: timestamp (daily)
- Clustered by: agent_specialization, research_id

### Scaffold Analysis  
- **darwin_scaffold_results.scaffold_analysis**: Million scaffold processing results
- Partitioned by: timestamp (daily)
- Clustered by: scaffold_id, analysis_id
- Optimized for: Million-scale inserts

### Collaboration Data
- **darwin_collaboration_data.collaborations**: Agent collaboration analytics
- Partitioned by: timestamp (daily)
- Clustered by: collaboration_id

### Performance Metrics
- **darwin_performance_metrics.performance_metrics**: JAX performance tracking
- Partitioned by: timestamp (daily)  
- Clustered by: component, operation

### Real-time Analytics
- **darwin_real_time_analytics.live_metrics**: Dashboard data
- Partitioned by: timestamp (hourly)
- Clustered by: metric_type

## üìà Analytics Views

- **performance_dashboard**: Real-time performance monitoring
- **scaffold_summary**: Daily scaffold analysis summary
- **research_insights_summary**: Agent collaboration analytics

## üîß Configuration

- **Data Retention**: Configured per dataset type
- **Partitioning**: Optimized for query performance
- **Clustering**: Optimized for common access patterns
- **Permissions**: Service accounts configured

## üöÄ Ready for Production

‚úÖ **Million scaffold processing**: Ready
‚úÖ **Real-time analytics**: Ready  
‚úÖ **AutoGen collaboration tracking**: Ready
‚úÖ **Performance monitoring**: Ready
‚úÖ **Data pipeline**: Ready

## üìû Next Steps

1. **Test data pipeline**: python scripts/test_bigquery_pipeline.py
2. **Deploy to Cloud Run**: Update Dockerfile with BigQuery integration
3. **Configure monitoring**: Setup alerting on data flow
4. **Production validation**: Process test scaffolds

---
Generated by DARWIN BigQuery Setup Script
EOF
    
    log_success "Setup summary created: $summary_file"
    echo ""
    cat "$summary_file"
}

# Main execution
main() {
    log_header
    
    # Execute setup steps
    check_prerequisites
    create_datasets
    create_tables
    create_analytics_views
    setup_data_retention
    test_data_insertion
    create_scheduled_queries
    verify_bigquery_setup
    generate_setup_summary
    
    log_success "
üéâ BIGQUERY SETUP COMPLETED SUCCESSFULLY! üéâ

‚úÖ Datasets and tables created
‚úÖ Analytics views configured
‚úÖ Data retention policies set
‚úÖ Insertion capabilities tested
‚úÖ Million scaffold pipeline ready

The DARWIN BigQuery infrastructure is now READY for million-scale processing! üìä

Next steps:
1. Test the data pipeline: python scripts/test_bigquery_pipeline.py
2. Generate synthetic scaffold data for testing
3. Deploy to Cloud Run with BigQuery integration
4. Monitor data flow and performance

üåä MILLION SCAFFOLD PROCESSING INFRASTRUCTURE IS LIVE! üöÄ
"
}

# Execute main function
main "$@"